import os
from datetime import datetime
from dotenv import load_dotenv
import requests
from google_sheet import get_birthdays_data
import calendar
from datetime import datetime, timedelta

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
TOPIC_ID = os.getenv("TOPIC_ID")

MONTHS_RU = {
    '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
    '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
    '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
}


def find_upcoming_birthdays(birthdays):
    today = datetime.today().date()
    upcoming = []

    for person in birthdays:
        raw_date = person.get('–î–∞—Ç–∞', '')
        date_str = str(raw_date).strip().lower().replace('  ', ' ')
        # print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É: {repr(date_str)}")

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "–¥–¥.–º–º" –∏ "–¥–¥ –º–µ—Å—è—Ü"
        if '.' in date_str:
            try:
                day, month = map(int, date_str.split('.'))
            except Exception:
                continue
        elif ' ' in date_str:
            try:
                day_part, month_part = date_str.split(' ', 1)
                day = int(day_part)
                month = MONTHS_RU.get(month_part.strip(), 0)
                if month == 0:
                    continue
            except Exception:
                continue
        else:
            continue

        try:
            bday_this_year = datetime(year=today.year, month=month, day=day).date()
        except ValueError:
            continue

        if bday_this_year < today:
            bday_this_year = bday_this_year.replace(year=today.year + 1)

        days_diff = (bday_this_year - today).days
        # print(f"  -> –î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {days_diff} –¥–Ω–µ–π")

        if days_diff in [0, 1, 2, 3]:
            upcoming.append({
                'name': person.get('–ò–º–µ–Ω–Ω–∏–Ω–∏–∫', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
                'days_left': days_diff
            })

    return upcoming



def build_message(delta, person):
    name = person['name']

    if delta == 3:
        return f"üì¢ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è üéâ"
    elif delta == 2:
        return f"üì¢ –û—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {name}! üéä"
    elif delta == 1:
        return f"üì¢ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ì–æ—Ç–æ–≤–∏–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è üéÅ"
    elif delta == 0:
        return f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –æ—Ç –≤—Å–µ–π –¥—É—à–∏! üéÇ"


def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "message_thread_id": int(TOPIC_ID),
        "text": text,
        "parse_mode": "HTML"
    }

    response = requests.post(url, json=payload)
    if response.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", response.text)


def main():
    birthdays = get_birthdays_data()

    print(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(birthdays)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    upcoming = find_upcoming_birthdays(birthdays)

    if not upcoming:
        print("‚úÖ –°–µ–≥–æ–¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
        return

    for person in upcoming:
        delta = person['days_left']
        message = build_message(delta, person)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
        send_telegram_message(message)


if __name__ == "__main__":
    main()
