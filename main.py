# -*- coding: utf-8 -*-
import os
import requests
import calendar
from datetime import datetime, timedelta, date
from dotenv import load_dotenv

from google_sheet import get_birthdays_data  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
TOPIC_ID = os.getenv("TOPIC_ID")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None / "" ‚Äî —Ç–æ–≥–¥–∞ —à–ª—ë–º –±–µ–∑ —Ç–µ–º—ã

# –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "–¥–¥ –º–µ—Å—è—Ü" (–≥–µ–Ω–∏—Ç–∏–≤)
MONTHS_RU = {
    '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
    '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
    '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
}

# –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ "–≤ —Å–µ–Ω—Ç—è–±—Ä–µ" (–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂)
MONTHS_RU_PP = {
    1: "—è–Ω–≤–∞—Ä–µ", 2: "—Ñ–µ–≤—Ä–∞–ª–µ", 3: "–º–∞—Ä—Ç–µ", 4: "–∞–ø—Ä–µ–ª–µ",
    5: "–º–∞–µ", 6: "–∏—é–Ω–µ", 7: "–∏—é–ª–µ", 8: "–∞–≤–≥—É—Å—Ç–µ",
    9: "—Å–µ–Ω—Ç—è–±—Ä–µ", 10: "–æ–∫—Ç—è–±—Ä–µ", 11: "–Ω–æ—è–±—Ä–µ", 12: "–¥–µ–∫–∞–±—Ä–µ",
}


# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ----------

def _parse_birthday_to_md(date_str: str):
    """
    –ü—Ä–∏–Ω—è—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–µ—Ä–Ω—É—Ç—å (month, day) –∏–ª–∏ None.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      - "–¥–¥.–º–º"  (–Ω–∞–ø—Ä–∏–º–µ—Ä, "09.27" –∏–ª–∏ "9.07")
      - "–¥–¥ –º–µ—Å—è—Ü" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "27 —Å–µ–Ω—Ç—è–±—Ä—è")
    –ì–æ–¥ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
    """
    if not date_str:
        return None
    s = str(date_str).strip().lower().replace('  ', ' ')
    # "–¥–¥.–º–º"
    if '.' in s:
        try:
            day, month = map(int, s.split('.'))
            return (month, day)
        except Exception:
            return None
    # "–¥–¥ –º–µ—Å—è—Ü"
    if ' ' in s:
        try:
            day_part, month_part = s.split(' ', 1)
            day = int(day_part)
            month = MONTHS_RU.get(month_part.strip(), 0)
            if month:
                return (month, day)
        except Exception:
            return None
    return None


def _today() -> date:
    # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π TZ ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ pytz/zoneinfo
    return datetime.today().date()


def send_telegram_message(text: str):
    assert TELEGRAM_BOT_TOKEN, "TELEGRAM_BOT_TOKEN is empty"
    assert CHAT_ID, "CHAT_ID is empty"

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    # –±–µ–∑–æ–ø–∞—Å–Ω–æ: –µ—Å–ª–∏ —Ç–µ–º—ã –Ω–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º message_thread_id
    if TOPIC_ID and str(TOPIC_ID).strip():
        try:
            payload["message_thread_id"] = int(TOPIC_ID)
        except Exception:
            pass

    r = requests.post(url, json=payload, timeout=15)
    if r.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", r.text)


# ---------- –¢–í–û–ò –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ----------

def find_upcoming_birthdays(birthdays):
    today = _today()
    upcoming = []

    for person in birthdays:
        raw_date = person.get('–î–∞—Ç–∞', '')
        md = _parse_birthday_to_md(raw_date)
        if not md:
            continue
        month, day = md

        # —Ü–µ–ª—å ‚Äî –±–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —ç—Ç–æ–º –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É)
        try:
            bday_this_year = date(year=today.year, month=month, day=day)
        except ValueError:
            continue

        if bday_this_year < today:
            bday_this_year = bday_this_year.replace(year=today.year + 1)

        days_diff = (bday_this_year - today).days
        if days_diff in (0, 1, 2, 3):
            upcoming.append({
                'name': person.get('–ò–º–µ–Ω–Ω–∏–Ω–∏–∫', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
                'days_left': days_diff
            })

    return upcoming


def build_message(delta, person):
    name = person['name']
    tag = '@' + '@timur0x01'  # –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å/—É–±—Ä–∞—Ç—å

    if delta == 3:
        return f"üì¢ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è üéâ\n{tag}"
    elif delta == 2:
        return f"üì¢ –û—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {name}! üéä\n{tag}"
    elif delta == 1:
        return f"üì¢ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! –ì–æ—Ç–æ–≤–∏–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è üéÅ\n{tag}"
    elif delta == 0:
        return f"üì¢ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name} üéÇ\n{tag}"


# ---------- –ù–û–í–û–ï: –ï–ñ–ï–ú–ï–°–Ø–ß–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢ ----------

def birthdays_in_month(birthdays, target_month: int):
    """
    –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ [{'name': str, 'day': int}] –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞.
    –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—é.
    """
    result = []
    for person in birthdays:
        raw_date = person.get('–î–∞—Ç–∞', '')
        md = _parse_birthday_to_md(raw_date)
        if not md:
            continue
        month, day = md
        if month == target_month:
            result.append({
                'name': person.get('–ò–º–µ–Ω–Ω–∏–Ω–∏–∫', '–ë–µ–∑ –∏–º–µ–Ω–∏'),
                'day': int(day),
            })
    result.sort(key=lambda x: x['day'])
    return result


def build_monthly_digest_message(month: int, items):
    title = f"üéÇ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏ –≤ {MONTHS_RU_PP.get(month, '')}"
    if not items:
        return f"{title}\n\n–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç."

    lines = [f"‚Ä¢ {day:02d} ‚Äî {name}" for (day, name) in [(it['day'], it['name']) for it in items]]
    body = "\n".join(lines)
    return f"{title}\n\n{body}\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∑–∞—Ä–∞–Ω–µ–µ! ü•≥"


def send_monthly_digest_if_first_day(birthdays):
    """
    –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 1 —á–∏—Å–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞.
    """
    today = _today()
    if today.day != 1:
        return False

    month_items = birthdays_in_month(birthdays, today.month)
    msg = build_monthly_digest_message(today.month, month_items)
    send_telegram_message(msg)
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç:\n", msg)
    return True


# ---------- MAIN ----------

def main():
    birthdays = get_birthdays_data()

    print(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(birthdays)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")

    # 1) –ü–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ ‚Äî —à–ª—ë–º –¥–∞–π–¥–∂–µ—Å—Ç
    send_monthly_digest_if_first_day(birthdays)

    # 2) –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ ¬´–∑–∞ 3/2/1/0 –¥–Ω—è¬ª
    upcoming = find_upcoming_birthdays(birthdays)
    if not upcoming:
        print("‚úÖ –°–µ–≥–æ–¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
        return

    for person in upcoming:
        delta = person['days_left']
        message = build_message(delta, person)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
        send_telegram_message(message)


if __name__ == "__main__":
    main()
